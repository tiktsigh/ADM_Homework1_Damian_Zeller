###Problem 1

#Say "Hello, World!" With Python
#Script:
print("Hello, World!")

#Python If-Else
#Script:
#!/bin/python3

import math
import os
import random
import re
import sys


if __name__ == '__main__':
    n=int(input().strip())

    if n%2 != 0:
        print("Weird")
    elif n>=2 and n<=5:
        print("Not Weird")
    elif n%2 == 0 and n>=6 and n<=20:
        print("Weird")
    elif n%2 == 0 and n>20:
        print("Not Weird")

#Arithmetic Operators
#Script:
if __name__ == '__main__':
    a = int(input())
    b = int(input())
    print(a+b)
    print(a-b)
    print(a*b)

#Python: Division
#Script:
if __name__ == '__main__':
    a = int(input())
    b = int(input())
    print(a//b)
    print(a/b)

#Loops
#Script:
if __name__ == '__main__':
    n = int(input())
    for i in range(n):
        print(i**2)

#Write a function
#Script:
def is_leap(year):
    leap = False

    # Write your logic here
    if year%4 == 0 and year%100 != 0:
        leap = True
    if year%400 == 0:
        leap= True



    return leap

#Print Function
#Script:
if __name__ == '__main__':
    n = int(input())
    values = list()
    for i in range(n):
        values.append(i+1)
    print(*values, sep='', end='\n')

 #List Comprehensions
 #Script:
 if __name__ == '__main__':
    x = int(input())
    y = int(input())
    z = int(input())
    n = int(input())
    # 1. Create a list with x,y,z, with constraint x+y+z!=n
    # 2. put these seperate lists in a list
    # 3. sort them lexiographic
    myList=list()
    for i in range(x+1):
        for j in range(y+1):
            for k in range(z+1):
                if i+j+k==n:
                    continue
                myList.append([i,j,k])

    print(myList)
#Find the Runner-Up Score!
#Script:
if __name__ == '__main__':
    n = int(input())
    arr = map(int, input().split())

    newList=list()
    for i in sorted(arr):
        if not(i in newList):
            newList.append(i)

    print(newList[-2])

 #Nested Lists
 #Script:
 if __name__ == '__main__':
    newList=[]
    nameList=[]
    scoreList=[]
    for _ in range(int(input())):
        name = input()
        score = float(input())
        newList.append([name,score])
        scoreList.append(score)
    sortedscore=sorted(list(set(scoreList)))
    secondLowest = sortedscore[1]

    nameList = []
    for na,sc in newList:
        if sc == secondLowest:
             nameList.append(na)

    print(*sorted(nameList), sep='\n')

  # Finding the percentage
  #Script:
  if __name__ == '__main__':
    n = int(input())
    student_marks = {}
    for _ in range(n):
        name, *line = input().split()
        scores = list(map(float, line))
        student_marks[name] = scores
    query_name = input()


    sum = 0
    for i in student_marks[query_name]:
        sum = sum + i
    average_grades = sum / len(student_marks[query_name])

    print("{:.2f}".format(average_grades))

#Lists
#Script:
if __name__ == '__main__':
    N = int(input())
    command=''
    value=[]
    mylist=[]

    for k in range(N):
        command, *value = input().split()
        value=list(map(int, value))
        if command == 'insert':
            mylist.insert(value[0],value[1])
        if command == 'print':
            print(mylist)
        if command == 'remove':
            mylist.remove(value[0])
        if command == 'append':
            mylist.append(value[0])
        if command == 'sort':
            mylist.sort()
        if command == 'pop':
            mylist.pop()
        if command == 'reverse':
            mylist.reverse()

#Tuples
#Script:
if __name__ == '__main__':
    n = int(input())
    integer_list = map(int, input().split())
    print(hash(tuple(integer_list)))

#sWAP cASE
#Script:
def swap_case(s):
    output = ""
    for atrip in s:
        if atrip.islower():
            output = output + atrip.upper()
            continue
        if atrip.isupper():
            output = output + atrip.lower()
            continue
        output = output + atrip
    return output

#String Split and Join
#Script:
def split_and_join(line):
    #write your code here
    data= line.split(" ")
    data2= "-".join(data)
    return data2

if __name__ == '__main__':
    line = input()
    result = split_and_join(line)
    print(result)

#What's Your Name?
#Script:
def print_full_name(first_name, last_name):
    # Write your code here
    print('Hello' + " " + first_name + ' ' + last_name + '! You just delved into python.')

#Mutations
#Script:
def mutate_string(s, i, c):
    l=list(s)
    l[i]= c
    new_string = ''.join(l)
    return(new_string)

#Find a string
#Script:
def count_substring(string, sub_string):
    subcount=0
    indexcount=0


    for s in range(len(string)):
        p=string.find(sub_string,indexcount)
        if p!= -1:
            subcount+=1
            indexcount= p+1
    return subcount

#String Validators
#Script:
if __name__ == '__main__':
    s = input()
    trutie=False
    for i in range(len(s)):
        if s[i].isalnum():
            trutie=True
            break
    print(trutie)

    trutie= False
    for i in range(len(s)):
        if s[i].isalpha():
            trutie=True
            break
    print(trutie)

    trutie= False
    for i in range(len(s)):
        if s[i].isdigit():
            trutie=True
            break
    print(trutie)

    trutie= False
    for i in range(len(s)):
        if s[i].islower():
            trutie=True
            break
    print(trutie)

    trutie= False
    for i in range(len(s)):
        if s[i].isupper():
            trutie=True
            break
    print(trutie)

#Text Wrap
#Script:
def wrap(string, max_width):
    indexstart=0
    stor=[]
    for i in range(len(string)//max_width +1):
        stor.append(string[indexstart:indexstart+max_width])
        indexstart+=max_width
    res = ""
    for substr in stor:
        res = res + substr + "\n"
    return res

#Designer Door Mat
#Script:
# Enter your code here. Read input from STDIN. Print output to STDOUT
N,M=input().split()
N=int(N)
M=int(M)
stringo="WELCOME"
stringo=stringo.center(M,"-")
listo=[]
stripo=".|."
for i in range(N//2):
    listo.append((2*i+1)*stripo)
    print(listo[i].center(M,'-'))
print(stringo)
for i in reversed(listo):
    print(i.center(M,'-'))

#String Formatting
#Script:
def print_formatted(number):
    # your code goes here
    n = number
    breito = len(bin(n)) - 2
    for i in range(1, n + 1):
        values=[]
        for q in 'doXb':
            values.append(format(i, q).rjust(breito," "))
        print(" ".join(values))

#Alphabet Rangoli
#Script:
def print_rangoli(n):
    stringo="a"
    alphabet="abcdefghijklmnopqrstuvwxyz"
    subalphabet=alphabet[0:n]
    listo=[]
    indexcount=-1
    for i in range(n-1,0,-1):
        alphab=subalphabet[i:]
        alphab= alphab[::-1] + alphab[1:]
        print("-".join(alphab).center(4*n-3,'-'))
    for i in range(n):
        alphab=subalphabet[i:]
        alphab= alphab[::-1] + alphab[1:]
        print("-".join(alphab).center(4*n-3,'-'))

#Introduction to Sets
#Script:
def average(array):
    seto= set(array)
    sum=0
    for i in seto:
        sum= sum+ i
    averago= float(sum/len(seto))
    return averago

#Symmetric Difference
#Script:
# Enter your code here. Read input from STDIN. Print output to STDOUT
p=int(input())
m = set(map(int, input().split()))
q= int(input())
n=set(map(int, input().split()))
seto1=m.difference(n)
seto2=n.difference(m)
seto1.update(seto2)
sortset= sorted(seto1)
for i in sortset:
    print(i)

#Set .add()
#Script:
p=int(input())
m = set()
for i in range(p):
    i= input()
    m.add(i)
print(len(m))

#Set .discard(), .remove() & .pop()
#Script:
# Enter your code here. Read input from STDIN. Print output to STDOUT
inputnumber=int(input())
seto=set(map(int,input().split()))
number_commands=int(input())
for i in range(number_commands):
    command= list(map(str, input().split()))
    if command[0] =='pop':
        if len(seto)!=0:
            seto.pop()
    if command[0] =='remove':
        try:
            seto.remove(int(command[1]))
        except KeyError:
            continue
    if command[0] == 'discard':
        seto.discard(int(command[1]))
print(sum(seto))

#Set .union() Operation
#Script:
# Enter your code here. Read input from STDIN. Print output to STDOUT
number_englishnp= int(input())
rollnumber_englishnp= set(map(int, input().split()))
number_frenchnp= int(input())
rollnumber_frenchnp= set(map(int, input().split()))
rollnumber_englishnp= rollnumber_englishnp.union(rollnumber_frenchnp)
print(len(rollnumber_englishnp))

#Set .intersection() Operation
#Script:
# Enter your code here. Read input from STDIN. Print output to STDOUT
number_englishnp= int(input())
rollnumber_englishnp= set(map(int, input().split()))
number_frenchnp= int(input())
rollnumber_frenchnp= set(map(int, input().split()))
rollnumber_both= rollnumber_englishnp.intersection(rollnumber_frenchnp)
print(len(rollnumber_both))

#Set .difference() Operation
#Script:
# Enter your code here. Read input from STDIN. Print output to STDOUT
number_englishnp= int(input())
rollnumber_englishnp= set(map(int, input().split()))
number_frenchnp= int(input())
rollnumber_frenchnp= set(map(int, input().split()))
rollnumber_onlyenglish= rollnumber_englishnp.difference(rollnumber_frenchnp)
print(len(rollnumber_onlyenglish))

#Set .symmetric_difference() Operation
#Script:
# Enter your code here. Read input from STDIN. Print output to STDOUT
number_englishnp= int(input())
rollnumber_englishnp= set(map(int, input().split()))
number_frenchnp= int(input())
rollnumber_frenchnp= set(map(int, input().split()))
rollnumber_onlyone= rollnumber_englishnp.symmetric_difference(rollnumber_frenchnp)
print(len(rollnumber_onlyone))

#Set Mutations
#Script:
# Enter your code here. Read input from STDIN. Print output to STDOUT
number_elements_a= int(input())
a= set(map(int, input().split()))
number_of_other_sets= int(input())
for i in range(number_of_other_sets):
    inputo3= list(map(str, input().split()))
    inputo4= set(map(int, input().split()))
    if inputo3[0]== 'update':
        a.update(inputo4)
    if inputo3[0]== 'intersection_update':
        a.intersection_update(inputo4)
    if inputo3[0]== 'difference_update':
        a.difference_update(inputo4)
    if inputo3[0]== 'symmetric_difference_update':
        a.symmetric_difference_update(inputo4)
print(sum(a))

#The Captain's Room
#Script:
# Enter your code here. Read input from STDIN. Print output to STDOUT
size_groups= int(input())
room_numbers_list= list(map(int, input().split()))
room_numbers_set= set(room_numbers_list)
room_captain_pre= sum(room_numbers_set)* size_groups - sum(room_numbers_list)
room_captain= room_captain_pre / (size_groups -1)
print(int(room_captain))

#Check Subset
#Script:
# Enter your code here. Read input from STDIN. Print output to STDOUT
number_test_cases= int(input())
for i in range(number_test_cases):
    number_items_set_a= int(input())
    seto_a= set(map(int,input().split()))
    number_items_set_b= int(input())
    seto_b= set(map(int,input().split()))
    if seto_a.issubset(seto_b):
        print(True)
    else:
        print(False)

#Check Strict Superset
#Script:
# Enter your code here. Read input from STDIN. Print output to STDOUT
seto_a= set(map(int,input().split()))
number_other_sets= int(input())
truecount=0
for i in range(number_other_sets):
    other_set= set(map(int,input().split()))
    if other_set.issubset(seto_a) and len(seto_a) != len(other_set):
        truecount+=1
if truecount== number_other_sets:
    print(True)
else:
    print(False)

#No Idea!
Script:
# Enter your code here. Read input from STDIN. Print output to STDOUT
n, m= map(int, input().split())
array= list(map(int, input().split()))
set_a= set(map(int, input().split()))
set_b= set(map(int, input().split()))
happiness= 0
for i in array:
    if i in set_a:
        happiness+=1
    if i in set_b:
        happiness-=1
print(happiness)

#collections.Counter()
#Script:
# Enter your code here. Read input from STDIN. Print output to STDOUT
from collections import Counter
number_shoes= int(input())
shoe_sizes= list(map(int, input().split()))
number_customers= int(input())
dicto= Counter(shoe_sizes)
earnings= 0
for i in range(number_customers):
    shoe_size, price= map(int, input().split())
    if shoe_size in dicto and dicto[shoe_size] > 0:
        dicto[shoe_size]-=1
        earnings+= price
print(earnings)

#DefaultDict Tutorial
Script:
from collections import defaultdict
size_a, size_b= map(int, input().split())
dicto= defaultdict(list)
for i in range(1, size_a+ 1):
    a=str(input())
    dicto[a].append(i)
for p in range(size_b):
    b= str(input())
    if b in dicto:
        print(' '.join(map(str, dicto[b])))
    else:
        print(-1)

#Collections.OrderedDict()
Script:
# Enter your code here. Read input from STDIN. Print output to STDOUT
from collections import OrderedDict
number_items= int(input())
ordered_dictionary=OrderedDict()
for i in range(number_items):
    item_name, net_price= map(str,input().rsplit(" ", 1))
    if item_name in ordered_dictionary:
        ordered_dictionary[item_name]+= int(net_price)
    else:
        ordered_dictionary[item_name]= int(net_price)
for key, value in ordered_dictionary.items():
    print(f'{key} {value}')

#Word Order
Script:
# Enter your code here. Read input from STDIN. Print output to STDOUT
from collections import OrderedDict, defaultdict
number_words= int(input())
dictoo= defaultdict(dict)
dicto= OrderedDict(dictoo)
distinct_number_count= number_words
for i in range(1, number_words+ 1):
    word= str(input())
    if word in dicto:
        distinct_number_count-=1
        dicto[word]+= 1
    else:
        dicto[word]= 1
print(distinct_number_count)
print(' '.join(map(str, dicto.values())))

#Collections.deque()
#Script:
from collections import deque
number_operations= int(input())
d= deque()
for i in range(number_operations):
    operation= list(map(str, input().split()))
    if operation[0]== 'append':
        d.append(int(operation[1]))
    if operation[0]== 'pop':
        d.pop()
    if operation[0]== 'popleft':
        d.popleft()
    if operation[0] == 'appendleft':
        d.appendleft(int(operation[1]))
print(' '.join(map(str, d)))

#Company Logo
#Script:
#!/bin/python3

import math
import os
import random
import re
import sys
from collections import Counter


if __name__ == '__main__':
    s = input()
    Counto= Counter(s)
    most_comon= Counto.most_common(3)
    most_comon.sort(key=lambda x: (-x[1], x[0]))
    for char, count in most_comon:
        print(f'{char} {count}')

#Arrays:
#Script:
def arrays(arr):
    resulto= list(reversed(arr))
    a= numpy.array(resulto, float)
    return a

#Transpose and Flatten
#Script:
# Enter your code here. Read input from STDIN. Print output to STDOUT
import numpy
number_lines, number_columns= map(int, input().split())
listo=[]
for i in range(number_lines):
    listo.append(list(map(int, input().split())))
array=numpy.array(listo)
print(numpy.transpose(array))
print(array.flatten())

#Concatenate
#Script:
import numpy
rows_array1,rows_array2, number_columns = map(int, input().split())
arrayo1= []
arrayo2= []
for i in range(rows_array1):
    arrayo1.append(list(map(int, input().split())))
for i in range(rows_array2):
    arrayo2.append(list(map(int, input().split())))
array1=numpy.array(arrayo1)
array2=numpy.array(arrayo2)
print(numpy.concatenate((array1, array2), axis=0))

#Zeros and Ones
#Script:
# Enter your code here. Read input from STDIN. Print output to STDOUT
import numpy
x=tuple(map(int, input().split()))
print(numpy.zeros(x, dtype=numpy.int))
print(numpy.ones(x, dtype=numpy.int))

#Eye and Identity
#Script:
# Enter your code here. Read input from STDIN. Print output to STDOUT
import numpy
numpy.set_printoptions(legacy='1.13')
n,m= map(int, input().split())
print(numpy.eye(n, m,))

#Array Mathematics
#Script:
# Enter your code here. Read input from STDIN. Print output to STDOUT
import numpy
number_integer_arrays, number_integers= map(int, input().split())
listo1= list(map(int, input().split()))
listo2= list(map(int, input().split()))
a= numpy.array(listo1, dtype='int')
b= numpy.array(listo2, dtype='int')


print(a+b)
print(a-b)
print(a*b)
print(a//b)
print(numpy.mod(a, b))
print(a**b)

#Floor, Ceil and Rint
#Script:
# Enter your code here. Read input from STDIN. Print output to STDOUT
import numpy
numpy.set_printoptions(legacy='1.13')
arraya= list(map(float, input().split()))
arrayo= numpy.array(arraya)
print(numpy.floor(arrayo))
print(numpy.ceil(arrayo))
print(numpy.rint(arrayo))

#Sum and Prod
Script:
import numpy
number_lines, number_int= map(int, input().split())
arrayo=[]
for i in range(number_lines):
    arrayo.append(list(map(int, input().split())))
arraya= numpy.array(arrayo)
arrayap= numpy.sum(arraya, axis = 0)
product= numpy.prod(arrayap)
print(product)

#Min and Max
#Script:
import numpy
number_lines, number_columns= map(int, input().split())
arraya=[]
for i in range(number_lines):
    arraya.append(list(map(int, input().split())))
arrayo= numpy.array(arraya)
minimum= numpy.min(arrayo, axis=1)
maximum= numpy.max(minimum)
print(maximum)

#Mean, Var, and Std
#Script:
# Enter your code here. Read input from STDIN. Print output to STDOUT
import numpy
number_lines, number_columns= map(int, input().split())
arraya=[]
for i in range(number_lines):
    arraya.append(list(map(int, input().split())))
arrayo= numpy.array(arraya)
mean= numpy.mean(arrayo, axis= 1)
variance= numpy.var(arrayo, axis= 0)
stddiv= numpy.std(arrayo)
print(mean)
print(variance)
rstddiv= round(stddiv, 11)
print(rstddiv)

#Dot and Cross
#Script:
import numpy
number_lines= int(input())
a=[]
b=[]
for i in range(number_lines):
    a.append(list(map(int, input().split())))
arraya= numpy.array(a)
for i in range(number_lines):
    b.append(list(map(int, input().split())))
arrayb= numpy.array(b)
matrixproduct= numpy.matmul(arraya, arrayb)
print(matrixproduct)

#Inner and Outer
#Script:
import numpy
a= list(map(int, input().split()))
arraya= numpy.array(a)
b= list(map(int, input().split()))
arrayb= numpy.array(b)
innerpro= numpy.inner(arraya, arrayb)
outerpro= numpy.outer(arraya, arrayb)
print(innerpro)
print(outerpro)

#Polynomials
#Script:
import numpy
coefficients= list(map(float, input().split()))
x= float(input())
coff= numpy.array(coefficients, float)
print(numpy.polyval(coff, x))

#Linear Algebra
#Script:
import numpy
dimension= int(input())
a=[]
for i in range(dimension):
    a.append(list(map(float, input().split())))
array_a= numpy.array(a, float)
print(round(numpy.linalg.det(array_a), 2))

#Shape and Reshape
#Script:
import numpy
listo= list(map(int, input().split()))
lista= numpy.array(listo)
print(numpy.reshape(lista, (3,3)))

#Calendar Module
#Script:
import datetime
month, day, year= map(int, input().split())
dateo= datetime.datetime(year, month, day)
weekday= dateo.strftime('%A')
print(weekday.upper()

#Exceptions
Script:
# Enter your code here. Read input from STDIN. Print output to STDOUT
number_test_cases= int(input())
for i in range(number_test_cases):
    a, b= map(str, input().split())
    try:
        print(int(a)//int(b))
    except ZeroDivisionError as e:
        print("Error Code:", e)
    except ValueError as p:
        print("Error Code:", p)

#Zipped!
Script:
# Enter your code here. Read input from STDIN. Print output to STDOUT
number_subjects, number_students= map(int, input().split())
listo=[]
for i in range(number_students):
    listo.append(map(float, input().split()))
for i in zip(*listo):
    print(sum(i) / len(i))

#Input()
#Script:
# Enter your code here. Read input from STDIN. Print output to STDOUT
function, result= map(int, input().split())
print(eval(input()) == result)

##############################################################################################

### Problem 2

#Birthday Cake Candles
#Script:
#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'birthdayCakeCandles' function below.
#
# The function is expected to return an INTEGER.
# The function accepts INTEGER_ARRAY candles as parameter.
#

def birthdayCakeCandles(candles):
    sorted_list= sorted(candles)
    biggest_candle= sorted_list[-1]
    counto= candles.count(biggest_candle)
    return counto



if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    candles_count = int(input().strip())


    candles = list(map(int, input().rstrip().split()))

    result = birthdayCakeCandles(candles)

    fptr.write(str(result) + '\n')

    fptr.close()


#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'kangaroo' function below.
#
# The function is expected to return a STRING.
# The function accepts following parameters:
#  1. INTEGER x1
#  2. INTEGER v1
#  3. INTEGER x2
#  4. INTEGER v2
#

def kangaroo(x1, v1, x2, v2):
    distance1= x1
    distance2= x2
    if v2>v1:
        return 'NO'
    while distance2>distance1:
        distance1= distance1 + v1
        distance2= distance2 + v2
        if distance1== distance2:
            return 'YES'
        if distance1>distance2:
            return 'NO'

#Number Line Jumps
#Script:
#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'kangaroo' function below.
#
# The function is expected to return a STRING.
# The function accepts following parameters:
#  1. INTEGER x1
#  2. INTEGER v1
#  3. INTEGER x2
#  4. INTEGER v2
#

def kangaroo(x1, v1, x2, v2):
    distance1= x1
    distance2= x2
    if v2>v1:
        return 'NO'
    if v1==v2:
        return 'NO'
    while distance2>distance1:
        distance1= distance1 + v1
        distance2= distance2 + v2
        if distance1== distance2:
            return 'YES'
        if distance1>distance2:
            return 'NO'


if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    first_multiple_input = input().rstrip().split()

    x1 = int(first_multiple_input[0])

    v1 = int(first_multiple_input[1])

    x2 = int(first_multiple_input[2])

    v2 = int(first_multiple_input[3])

    result = kangaroo(x1, v1, x2, v2)

    fptr.write(result + '\n')

    fptr.close()

#Viral Advertising
#Script:
#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'viralAdvertising' function below.
#
# The function is expected to return an INTEGER.
# The function accepts INTEGER n as parameter.
#

def viralAdvertising(n):
    number_invites= 5
    number_likes= math.floor(5//2)
    if n>1:
        for i in range(n-1):
            number_invites= math.floor(number_invites//2)*3
            number_likes= number_likes + math.floor(number_invites//2)
    return number_likes


if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input().strip())

    result = viralAdvertising(n)

    fptr.write(str(result) + '\n')

    fptr.close()

#Recursive Digit Sum
#Script:
#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'superDigit' function below.
#
# The function is expected to return an INTEGER.
# The function accepts following parameters:
#  1. STRING n
#  2. INTEGER k
#

def superDigit(n, k):
    stringo = ''.join([n]*k)
    empto=0
    for i in stringo:
        empto+= int(i)
    if empto<10:
        return empto
    n= str(empto)
    k=1
    return superDigit(str(empto), 1)



if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    first_multiple_input = input().rstrip().split()

    n = first_multiple_input[0]

    k = int(first_multiple_input[1])

    result = superDigit(n, k)

    fptr.write(str(result) + '\n')

    fptr.close()

#Insertion Sort - Part 1
#Script:
#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'insertionSort1' function below.
#
# The function accepts following parameters:
#  1. INTEGER n
#  2. INTEGER_ARRAY arr
#

def insertionSort1(n, arr):
    stored_value= arr[n-1]
    for i in range(n,1,-1):
        p= i-1
        #zweiter loop
        while p>= 1:
            if arr[p+1]< arr[p]:
                print(" ".join(map(str, arr)))
            else:
                arr[p]= arr[p+1]
                print(" ".join(map(str, arr)))
            p-=1


if __name__ == '__main__':
    n = int(input().strip())

    arr = list(map(int, input().rstrip().split()))

    insertionSort1(n, arr)



    











































































